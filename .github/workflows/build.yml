name: Build / Release Minecraft Mod

on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  JAVA_VERSION: '21'
  GRADLE_BUILD_TASK: 'build'
  ARTIFACT_STAGING_DIR: './artifacts_to_upload'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Grant Execute Permissions for Gradle Wrapper
        run: chmod +x gradlew

      - name: Build Mod
        run: ./gradlew ${{ env.GRADLE_BUILD_TASK }}

      - name: Create Staging Directory
        run: mkdir -p ${{ env.ARTIFACT_STAGING_DIR }}

      - name: Collect and Rename JARs
        run: |
          # Use find to list desired JARs, then loop through them
          find versions -type f -path "*/build/libs/*.jar" \
            ! -name "*-sources.jar" \
            ! -name "*-javadoc.jar" | while read -r jar_path; do

            # Extract the Minecraft version from the path
            # Example: versions/1.20.1/build/libs/mymod-1.0.0.jar -> 1.20.1
            mc_version=$(echo "$jar_path" | sed -n 's|versions/\([^/]*\)/.*|\1|p')

            # Extract the original JAR filename
            # Example: mymod-1.0.0.jar
            original_filename=$(basename "$jar_path")

            # Construct the new filename: [VERSION]-[OriginalFilename]
            # Example: 1.20.1-mymod-1.0.0.jar
            new_filename="${mc_version}-${original_filename}"

            echo "Renaming '$original_filename' (from MC $mc_version) to '$new_filename'"

            # Copy and rename to the staging directory
            cp "$jar_path" "${{ env.ARTIFACT_STAGING_DIR }}/$new_filename"
          done

      - name: List Staged Files
        run: ls -l ${{ env.ARTIFACT_STAGING_DIR }}

      - name: Upload JARs
        uses: actions/upload-artifact@v4
        with:
          name: mod-jars
          path: ${{ env.ARTIFACT_STAGING_DIR }}/
          retention-days: 7

  release:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: mod-jars

      - name: List Downloaded Files (for debugging)
        run: ls -R

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.jar"
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}